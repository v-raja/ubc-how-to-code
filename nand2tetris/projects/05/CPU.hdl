// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // ixxaccccccdddjjj
    // instruction[15] is A (load into A register) or C instruction (what ALU should do) 0 is A 1 is `c`
    // instruction[12] ALU operates on A register or M input
    // instruction[3] is writeM
    // instruction[4] is writeD
    // instruction[5] is writeA

    // The 4th bit is writeM, but it only gets emitted in an A-instruction (signified by the 16th bit)
    And (a=instruction[3], b=instruction[15], out=writeM);

    // if an A-instruction (16th bit is 0) then treat instruction as binary value to load into A-register
    Mux16 (a=instruction, b=aluOut, sel=instruction[15], out=muxOneOut);

    // load ARegister if insturction is A-instruction == 0 (hence, notOp in the Or gate) or if writeA (6th bit)
    Not (in=instruction[15], out=notOp);
    Or (a=notOp, b=instruction[5], out=loadA);
    ARegister (in=muxOneOut, load=loadA, out=aOut, out[0..14] = addressM);

    // 13th bit signifies if input into ALU should be ARegister (if 0) or MRegister (i.e. inM if 1)
    Mux16 (a=aOut, b=inM, sel=instruction[12], out=muxTwoOut);

    // DRegister always recieves from aluOut. C-instruction and 5th bit signifies whether to write to D or not
    And (a=instruction[15], b=instruction[4], out=loadD);
    DRegister (in=aluOut, load=loadD, out=dOut);

    // Inputs from DRegister and 2nd Mux16
    ALU  (x=dOut,
          y=muxTwoOut,
          zx=instruction[11],
          nx=instruction[10],
          zy=instruction[9],
          ny=instruction[8],
          f=instruction[7],
          no=instruction[6],
          zr=aluZr,
          ng=aluNg,
          out=outM,
          out=aluOut);

    // Jump if aluOut > 0 and 1st bit
    Not (in=aluZr, out=notAluZr);                       // not (aluOut == 0)
    Not (in=aluNg, out=notAluNg);                       // not (aluOut < 0)
    And (a=notAluZr, b=notAluNg, out=aluPos);           // aluOut > 0
    And (a=instruction[15], b=instruction[0], out=jgt); // c-instruction and jgt bit
    And (a=jgt, b=aluPos, out=posJmp);

    // Jump if aluOut == 0 and 2nd bit
    And (a=instruction[15], b=instruction[1], out=jeq);
    And (a=jeq, b=aluZr, out=zrJmp);

    // Jump_if aluOut < 0 and 3rd bit
    And (a=instruction[15], b=instruction[2], out=jlt);
    And (a=jlt, b=aluNg, out=ngJmp);


    // Jump based on ouput of above functions
    Or (a=zrJmp, b=ngJmp, out=zrNgJmp);
    Or (a=zrNgJmp, b=posJmp, out=jump);

    PC (in=aOut, load=jump, inc=true, reset=reset, out[0..14]=pc);

}
